
stm32g431_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cd8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002eb0  08002eb0  00003eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ec0  08002ec0  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002ec0  08002ec0  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002ec0  08002ec0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ec0  08002ec0  00003ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ec4  08002ec4  00003ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002ec8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002ed4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002ed4  00004080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b698  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d57  00000000  00000000  0000f6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00011430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000098a  00000000  00000000  000120b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df23  00000000  00000000  00012a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1a5  00000000  00000000  0003095d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf3f4  00000000  00000000  0003eb02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fdef6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003320  00000000  00000000  000fdf3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0010125c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002e98 	.word	0x08002e98

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002e98 	.word	0x08002e98

08000218 <map>:
#include "common.h"


long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
 8000224:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000226:	68fa      	ldr	r2, [r7, #12]
 8000228:	68bb      	ldr	r3, [r7, #8]
 800022a:	1ad3      	subs	r3, r2, r3
 800022c:	69b9      	ldr	r1, [r7, #24]
 800022e:	683a      	ldr	r2, [r7, #0]
 8000230:	1a8a      	subs	r2, r1, r2
 8000232:	fb03 f202 	mul.w	r2, r3, r2
 8000236:	6879      	ldr	r1, [r7, #4]
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	1acb      	subs	r3, r1, r3
 800023c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	4413      	add	r3, r2
}
 8000244:	4618      	mov	r0, r3
 8000246:	3714      	adds	r7, #20
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr

08000250 <dimmingLevelMapping>:
{
	dimming_mode = mode;
}

uint32_t dimmingLevelMapping(uint32_t current_val)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af02      	add	r7, sp, #8
 8000256:	6078      	str	r0, [r7, #4]
	return (uint32_t)map(current_val, PWM_PULSE_MIN, PWM_PULSE_MAX, DIMMING_LEVEL_MIN, DIMMING_LEVEL_MAX);
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	2363      	movs	r3, #99	@ 0x63
 800025c:	9300      	str	r3, [sp, #0]
 800025e:	2300      	movs	r3, #0
 8000260:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000264:	2100      	movs	r1, #0
 8000266:	f7ff ffd7 	bl	8000218 <map>
 800026a:	4603      	mov	r3, r0
}
 800026c:	4618      	mov	r0, r3
 800026e:	3708      	adds	r7, #8
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	if (htim != NULL && htim == &htim3)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d01a      	beq.n	80002b8 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	4a0f      	ldr	r2, [pc, #60]	@ (80002c4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d116      	bne.n	80002b8 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
	{
		if (dimming_level == DIMMING_LEVEL_MAX && dimming_mode == DIMMING_UP)
 800028a:	4b0f      	ldr	r3, [pc, #60]	@ (80002c8 <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b63      	cmp	r3, #99	@ 0x63
 8000290:	d107      	bne.n	80002a2 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
 8000292:	4b0e      	ldr	r3, [pc, #56]	@ (80002cc <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2b01      	cmp	r3, #1
 8000298:	d103      	bne.n	80002a2 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
		{
			dimming_mode = DIMMING_DOWN;
 800029a:	4b0c      	ldr	r3, [pc, #48]	@ (80002cc <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 800029c:	2202      	movs	r2, #2
 800029e:	701a      	strb	r2, [r3, #0]
		else if (dimming_level == DIMMING_LEVEL_MIN && dimming_mode == DIMMING_DOWN)
		{
			dimming_mode = DIMMING_UP;
		}
	}
}
 80002a0:	e00a      	b.n	80002b8 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
		else if (dimming_level == DIMMING_LEVEL_MIN && dimming_mode == DIMMING_DOWN)
 80002a2:	4b09      	ldr	r3, [pc, #36]	@ (80002c8 <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d106      	bne.n	80002b8 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
 80002aa:	4b08      	ldr	r3, [pc, #32]	@ (80002cc <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	d102      	bne.n	80002b8 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
			dimming_mode = DIMMING_UP;
 80002b2:	4b06      	ldr	r3, [pc, #24]	@ (80002cc <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	701a      	strb	r2, [r3, #0]
}
 80002b8:	bf00      	nop
 80002ba:	370c      	adds	r7, #12
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr
 80002c4:	20000030 	.word	0x20000030
 80002c8:	20000029 	.word	0x20000029
 80002cc:	20000028 	.word	0x20000028

080002d0 <dimmingProc>:

void dimmingProc(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	static uint32_t pre_time = 0;

	switch (dimming_mode)
 80002d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000384 <dimmingProc+0xb4>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b02      	cmp	r3, #2
 80002da:	d02e      	beq.n	800033a <dimmingProc+0x6a>
 80002dc:	2b02      	cmp	r3, #2
 80002de:	dc4e      	bgt.n	800037e <dimmingProc+0xae>
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d002      	beq.n	80002ea <dimmingProc+0x1a>
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d009      	beq.n	80002fc <dimmingProc+0x2c>
			dimming_level = dimmingLevelMapping(htim3.Instance->CCR1);
			htim3.Instance->CCR1-=100;
		}
		break;
	}
}
 80002e8:	e049      	b.n	800037e <dimmingProc+0xae>
		dimming_mode = DIMMING_UP;
 80002ea:	4b26      	ldr	r3, [pc, #152]	@ (8000384 <dimmingProc+0xb4>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	701a      	strb	r2, [r3, #0]
		pre_time = HAL_GetTick();
 80002f0:	f000 fab8 	bl	8000864 <HAL_GetTick>
 80002f4:	4603      	mov	r3, r0
 80002f6:	4a24      	ldr	r2, [pc, #144]	@ (8000388 <dimmingProc+0xb8>)
 80002f8:	6013      	str	r3, [r2, #0]
		break;
 80002fa:	e040      	b.n	800037e <dimmingProc+0xae>
		if (HAL_GetTick() - pre_time >= 10)
 80002fc:	f000 fab2 	bl	8000864 <HAL_GetTick>
 8000300:	4602      	mov	r2, r0
 8000302:	4b21      	ldr	r3, [pc, #132]	@ (8000388 <dimmingProc+0xb8>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	1ad3      	subs	r3, r2, r3
 8000308:	2b09      	cmp	r3, #9
 800030a:	d935      	bls.n	8000378 <dimmingProc+0xa8>
			pre_time = HAL_GetTick();
 800030c:	f000 faaa 	bl	8000864 <HAL_GetTick>
 8000310:	4603      	mov	r3, r0
 8000312:	4a1d      	ldr	r2, [pc, #116]	@ (8000388 <dimmingProc+0xb8>)
 8000314:	6013      	str	r3, [r2, #0]
			dimming_level = dimmingLevelMapping(htim3.Instance->CCR1);
 8000316:	4b1d      	ldr	r3, [pc, #116]	@ (800038c <dimmingProc+0xbc>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ff97 	bl	8000250 <dimmingLevelMapping>
 8000322:	4603      	mov	r3, r0
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4b1a      	ldr	r3, [pc, #104]	@ (8000390 <dimmingProc+0xc0>)
 8000328:	701a      	strb	r2, [r3, #0]
			htim3.Instance->CCR1+=100;
 800032a:	4b18      	ldr	r3, [pc, #96]	@ (800038c <dimmingProc+0xbc>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000330:	4b16      	ldr	r3, [pc, #88]	@ (800038c <dimmingProc+0xbc>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	3264      	adds	r2, #100	@ 0x64
 8000336:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000338:	e01e      	b.n	8000378 <dimmingProc+0xa8>
		if (HAL_GetTick() - pre_time >= 10)
 800033a:	f000 fa93 	bl	8000864 <HAL_GetTick>
 800033e:	4602      	mov	r2, r0
 8000340:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <dimmingProc+0xb8>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	1ad3      	subs	r3, r2, r3
 8000346:	2b09      	cmp	r3, #9
 8000348:	d918      	bls.n	800037c <dimmingProc+0xac>
			pre_time = HAL_GetTick();
 800034a:	f000 fa8b 	bl	8000864 <HAL_GetTick>
 800034e:	4603      	mov	r3, r0
 8000350:	4a0d      	ldr	r2, [pc, #52]	@ (8000388 <dimmingProc+0xb8>)
 8000352:	6013      	str	r3, [r2, #0]
			dimming_level = dimmingLevelMapping(htim3.Instance->CCR1);
 8000354:	4b0d      	ldr	r3, [pc, #52]	@ (800038c <dimmingProc+0xbc>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff78 	bl	8000250 <dimmingLevelMapping>
 8000360:	4603      	mov	r3, r0
 8000362:	b2da      	uxtb	r2, r3
 8000364:	4b0a      	ldr	r3, [pc, #40]	@ (8000390 <dimmingProc+0xc0>)
 8000366:	701a      	strb	r2, [r3, #0]
			htim3.Instance->CCR1-=100;
 8000368:	4b08      	ldr	r3, [pc, #32]	@ (800038c <dimmingProc+0xbc>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800036e:	4b07      	ldr	r3, [pc, #28]	@ (800038c <dimmingProc+0xbc>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	3a64      	subs	r2, #100	@ 0x64
 8000374:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000376:	e001      	b.n	800037c <dimmingProc+0xac>
		break;
 8000378:	bf00      	nop
 800037a:	e000      	b.n	800037e <dimmingProc+0xae>
		break;
 800037c:	bf00      	nop
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000028 	.word	0x20000028
 8000388:	2000002c 	.word	0x2000002c
 800038c:	20000030 	.word	0x20000030
 8000390:	20000029 	.word	0x20000029

08000394 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800039a:	4b15      	ldr	r3, [pc, #84]	@ (80003f0 <MX_GPIO_Init+0x5c>)
 800039c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800039e:	4a14      	ldr	r2, [pc, #80]	@ (80003f0 <MX_GPIO_Init+0x5c>)
 80003a0:	f043 0320 	orr.w	r3, r3, #32
 80003a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003a6:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <MX_GPIO_Init+0x5c>)
 80003a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003aa:	f003 0320 	and.w	r3, r3, #32
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b2:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <MX_GPIO_Init+0x5c>)
 80003b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003b6:	4a0e      	ldr	r2, [pc, #56]	@ (80003f0 <MX_GPIO_Init+0x5c>)
 80003b8:	f043 0304 	orr.w	r3, r3, #4
 80003bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003be:	4b0c      	ldr	r3, [pc, #48]	@ (80003f0 <MX_GPIO_Init+0x5c>)
 80003c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003c2:	f003 0304 	and.w	r3, r3, #4
 80003c6:	60bb      	str	r3, [r7, #8]
 80003c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ca:	4b09      	ldr	r3, [pc, #36]	@ (80003f0 <MX_GPIO_Init+0x5c>)
 80003cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ce:	4a08      	ldr	r2, [pc, #32]	@ (80003f0 <MX_GPIO_Init+0x5c>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003d6:	4b06      	ldr	r3, [pc, #24]	@ (80003f0 <MX_GPIO_Init+0x5c>)
 80003d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003da:	f003 0301 	and.w	r3, r3, #1
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]

}
 80003e2:	bf00      	nop
 80003e4:	3714      	adds	r7, #20
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	40021000 	.word	0x40021000

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f8:	f000 f9cf 	bl	800079a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fc:	f000 f80e 	bl	800041c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000400:	f7ff ffc8 	bl	8000394 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000404:	f000 f8ca 	bl	800059c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000408:	2100      	movs	r1, #0
 800040a:	4803      	ldr	r0, [pc, #12]	@ (8000418 <main+0x24>)
 800040c:	f001 fb2a 	bl	8001a64 <HAL_TIM_PWM_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  dimmingProc();
 8000410:	f7ff ff5e 	bl	80002d0 <dimmingProc>
 8000414:	e7fc      	b.n	8000410 <main+0x1c>
 8000416:	bf00      	nop
 8000418:	20000030 	.word	0x20000030

0800041c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b094      	sub	sp, #80	@ 0x50
 8000420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000422:	f107 0318 	add.w	r3, r7, #24
 8000426:	2238      	movs	r2, #56	@ 0x38
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f002 fd08 	bl	8002e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
 800043c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800043e:	2000      	movs	r0, #0
 8000440:	f000 fcae 	bl	8000da0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000444:	2301      	movs	r3, #1
 8000446:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000448:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800044c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800044e:	2302      	movs	r3, #2
 8000450:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000452:	2303      	movs	r3, #3
 8000454:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000456:	2302      	movs	r3, #2
 8000458:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800045a:	2355      	movs	r3, #85	@ 0x55
 800045c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800045e:	2302      	movs	r3, #2
 8000460:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000462:	2302      	movs	r3, #2
 8000464:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000466:	2302      	movs	r3, #2
 8000468:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046a:	f107 0318 	add.w	r3, r7, #24
 800046e:	4618      	mov	r0, r3
 8000470:	f000 fd4a 	bl	8000f08 <HAL_RCC_OscConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800047a:	f000 f818 	bl	80004ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047e:	230f      	movs	r3, #15
 8000480:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000482:	2303      	movs	r3, #3
 8000484:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2104      	movs	r1, #4
 8000496:	4618      	mov	r0, r3
 8000498:	f001 f848 	bl	800152c <HAL_RCC_ClockConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004a2:	f000 f804 	bl	80004ae <Error_Handler>
  }
}
 80004a6:	bf00      	nop
 80004a8:	3750      	adds	r7, #80	@ 0x50
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b2:	b672      	cpsid	i
}
 80004b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b6:	bf00      	nop
 80004b8:	e7fd      	b.n	80004b6 <Error_Handler+0x8>
	...

080004bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <HAL_MspInit+0x44>)
 80004c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000500 <HAL_MspInit+0x44>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80004ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <HAL_MspInit+0x44>)
 80004d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004da:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <HAL_MspInit+0x44>)
 80004dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004de:	4a08      	ldr	r2, [pc, #32]	@ (8000500 <HAL_MspInit+0x44>)
 80004e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80004e6:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <HAL_MspInit+0x44>)
 80004e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80004f2:	f000 fcf9 	bl	8000ee8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000

08000504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <NMI_Handler+0x4>

0800050c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <HardFault_Handler+0x4>

08000514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <MemManage_Handler+0x4>

0800051c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <BusFault_Handler+0x4>

08000524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <UsageFault_Handler+0x4>

0800052c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055a:	f000 f971 	bl	8000840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000568:	4802      	ldr	r0, [pc, #8]	@ (8000574 <TIM3_IRQHandler+0x10>)
 800056a:	f001 fbc7 	bl	8001cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000030 	.word	0x20000030

08000578 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800057c:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <SystemInit+0x20>)
 800057e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000582:	4a05      	ldr	r2, [pc, #20]	@ (8000598 <SystemInit+0x20>)
 8000584:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000588:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08e      	sub	sp, #56	@ 0x38
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b0:	f107 031c 	add.w	r3, r7, #28
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005bc:	463b      	mov	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]
 80005ca:	615a      	str	r2, [r3, #20]
 80005cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <MX_TIM3_Init+0xe8>)
 80005d0:	4a2d      	ldr	r2, [pc, #180]	@ (8000688 <MX_TIM3_Init+0xec>)
 80005d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170-1;
 80005d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000684 <MX_TIM3_Init+0xe8>)
 80005d6:	22a9      	movs	r2, #169	@ 0xa9
 80005d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005da:	4b2a      	ldr	r3, [pc, #168]	@ (8000684 <MX_TIM3_Init+0xe8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80005e0:	4b28      	ldr	r3, [pc, #160]	@ (8000684 <MX_TIM3_Init+0xe8>)
 80005e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80005e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e8:	4b26      	ldr	r3, [pc, #152]	@ (8000684 <MX_TIM3_Init+0xe8>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ee:	4b25      	ldr	r3, [pc, #148]	@ (8000684 <MX_TIM3_Init+0xe8>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005f4:	4823      	ldr	r0, [pc, #140]	@ (8000684 <MX_TIM3_Init+0xe8>)
 80005f6:	f001 f97d 	bl	80018f4 <HAL_TIM_Base_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000600:	f7ff ff55 	bl	80004ae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000604:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000608:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800060a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800060e:	4619      	mov	r1, r3
 8000610:	481c      	ldr	r0, [pc, #112]	@ (8000684 <MX_TIM3_Init+0xe8>)
 8000612:	f001 fdd7 	bl	80021c4 <HAL_TIM_ConfigClockSource>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800061c:	f7ff ff47 	bl	80004ae <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000620:	4818      	ldr	r0, [pc, #96]	@ (8000684 <MX_TIM3_Init+0xe8>)
 8000622:	f001 f9be 	bl	80019a2 <HAL_TIM_PWM_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800062c:	f7ff ff3f 	bl	80004ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000634:	2300      	movs	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4619      	mov	r1, r3
 800063e:	4811      	ldr	r0, [pc, #68]	@ (8000684 <MX_TIM3_Init+0xe8>)
 8000640:	f002 fb36 	bl	8002cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800064a:	f7ff ff30 	bl	80004ae <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800064e:	2360      	movs	r3, #96	@ 0x60
 8000650:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	4619      	mov	r1, r3
 8000664:	4807      	ldr	r0, [pc, #28]	@ (8000684 <MX_TIM3_Init+0xe8>)
 8000666:	f001 fc99 	bl	8001f9c <HAL_TIM_PWM_ConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000670:	f7ff ff1d 	bl	80004ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000674:	4803      	ldr	r0, [pc, #12]	@ (8000684 <MX_TIM3_Init+0xe8>)
 8000676:	f000 f82f 	bl	80006d8 <HAL_TIM_MspPostInit>

}
 800067a:	bf00      	nop
 800067c:	3738      	adds	r7, #56	@ 0x38
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000030 	.word	0x20000030
 8000688:	40000400 	.word	0x40000400

0800068c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a0d      	ldr	r2, [pc, #52]	@ (80006d0 <HAL_TIM_Base_MspInit+0x44>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d113      	bne.n	80006c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800069e:	4b0d      	ldr	r3, [pc, #52]	@ (80006d4 <HAL_TIM_Base_MspInit+0x48>)
 80006a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006a2:	4a0c      	ldr	r2, [pc, #48]	@ (80006d4 <HAL_TIM_Base_MspInit+0x48>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80006aa:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <HAL_TIM_Base_MspInit+0x48>)
 80006ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	201d      	movs	r0, #29
 80006bc:	f000 f9b9 	bl	8000a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80006c0:	201d      	movs	r0, #29
 80006c2:	f000 f9d0 	bl	8000a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40000400 	.word	0x40000400
 80006d4:	40021000 	.word	0x40021000

080006d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a11      	ldr	r2, [pc, #68]	@ (800073c <HAL_TIM_MspPostInit+0x64>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d11b      	bne.n	8000732 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <HAL_TIM_MspPostInit+0x68>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	4a10      	ldr	r2, [pc, #64]	@ (8000740 <HAL_TIM_MspPostInit+0x68>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <HAL_TIM_MspPostInit+0x68>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = LED_Pin;
 8000712:	2340      	movs	r3, #64	@ 0x40
 8000714:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000722:	2302      	movs	r3, #2
 8000724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	4619      	mov	r1, r3
 800072c:	4805      	ldr	r0, [pc, #20]	@ (8000744 <HAL_TIM_MspPostInit+0x6c>)
 800072e:	f000 f9b5 	bl	8000a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000732:	bf00      	nop
 8000734:	3720      	adds	r7, #32
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40000400 	.word	0x40000400
 8000740:	40021000 	.word	0x40021000
 8000744:	48000800 	.word	0x48000800

08000748 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000748:	480d      	ldr	r0, [pc, #52]	@ (8000780 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800074a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800074c:	f7ff ff14 	bl	8000578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000750:	480c      	ldr	r0, [pc, #48]	@ (8000784 <LoopForever+0x6>)
  ldr r1, =_edata
 8000752:	490d      	ldr	r1, [pc, #52]	@ (8000788 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000754:	4a0d      	ldr	r2, [pc, #52]	@ (800078c <LoopForever+0xe>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000758:	e002      	b.n	8000760 <LoopCopyDataInit>

0800075a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800075c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075e:	3304      	adds	r3, #4

08000760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000764:	d3f9      	bcc.n	800075a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000766:	4a0a      	ldr	r2, [pc, #40]	@ (8000790 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000768:	4c0a      	ldr	r4, [pc, #40]	@ (8000794 <LoopForever+0x16>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800076c:	e001      	b.n	8000772 <LoopFillZerobss>

0800076e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000770:	3204      	adds	r2, #4

08000772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000774:	d3fb      	bcc.n	800076e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000776:	f002 fb6b 	bl	8002e50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800077a:	f7ff fe3b 	bl	80003f4 <main>

0800077e <LoopForever>:

LoopForever:
    b LoopForever
 800077e:	e7fe      	b.n	800077e <LoopForever>
  ldr   r0, =_estack
 8000780:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800078c:	08002ec8 	.word	0x08002ec8
  ldr r2, =_sbss
 8000790:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000794:	20000080 	.word	0x20000080

08000798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC1_2_IRQHandler>

0800079a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007a0:	2300      	movs	r3, #0
 80007a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a4:	2003      	movs	r0, #3
 80007a6:	f000 f939 	bl	8000a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007aa:	200f      	movs	r0, #15
 80007ac:	f000 f80e 	bl	80007cc <HAL_InitTick>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d002      	beq.n	80007bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	71fb      	strb	r3, [r7, #7]
 80007ba:	e001      	b.n	80007c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007bc:	f7ff fe7e 	bl	80004bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007c0:	79fb      	ldrb	r3, [r7, #7]

}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007d4:	2300      	movs	r3, #0
 80007d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80007d8:	4b16      	ldr	r3, [pc, #88]	@ (8000834 <HAL_InitTick+0x68>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d022      	beq.n	8000826 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80007e0:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <HAL_InitTick+0x6c>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <HAL_InitTick+0x68>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80007f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 f944 	bl	8000a82 <HAL_SYSTICK_Config>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d10f      	bne.n	8000820 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b0f      	cmp	r3, #15
 8000804:	d809      	bhi.n	800081a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000806:	2200      	movs	r2, #0
 8000808:	6879      	ldr	r1, [r7, #4]
 800080a:	f04f 30ff 	mov.w	r0, #4294967295
 800080e:	f000 f910 	bl	8000a32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000812:	4a0a      	ldr	r2, [pc, #40]	@ (800083c <HAL_InitTick+0x70>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	e007      	b.n	800082a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	e004      	b.n	800082a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000820:	2301      	movs	r3, #1
 8000822:	73fb      	strb	r3, [r7, #15]
 8000824:	e001      	b.n	800082a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800082a:	7bfb      	ldrb	r3, [r7, #15]
}
 800082c:	4618      	mov	r0, r3
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000008 	.word	0x20000008
 8000838:	20000000 	.word	0x20000000
 800083c:	20000004 	.word	0x20000004

08000840 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000844:	4b05      	ldr	r3, [pc, #20]	@ (800085c <HAL_IncTick+0x1c>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <HAL_IncTick+0x20>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4413      	add	r3, r2
 800084e:	4a03      	ldr	r2, [pc, #12]	@ (800085c <HAL_IncTick+0x1c>)
 8000850:	6013      	str	r3, [r2, #0]
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	2000007c 	.word	0x2000007c
 8000860:	20000008 	.word	0x20000008

08000864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return uwTick;
 8000868:	4b03      	ldr	r3, [pc, #12]	@ (8000878 <HAL_GetTick+0x14>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	4618      	mov	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	2000007c 	.word	0x2000007c

0800087c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800088c:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <__NVIC_SetPriorityGrouping+0x44>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000898:	4013      	ands	r3, r2
 800089a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ae:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <__NVIC_SetPriorityGrouping+0x44>)
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	60d3      	str	r3, [r2, #12]
}
 80008b4:	bf00      	nop
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c8:	4b04      	ldr	r3, [pc, #16]	@ (80008dc <__NVIC_GetPriorityGrouping+0x18>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	f003 0307 	and.w	r3, r3, #7
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	db0b      	blt.n	800090a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	f003 021f 	and.w	r2, r3, #31
 80008f8:	4907      	ldr	r1, [pc, #28]	@ (8000918 <__NVIC_EnableIRQ+0x38>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	095b      	lsrs	r3, r3, #5
 8000900:	2001      	movs	r0, #1
 8000902:	fa00 f202 	lsl.w	r2, r0, r2
 8000906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000e100 	.word	0xe000e100

0800091c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092c:	2b00      	cmp	r3, #0
 800092e:	db0a      	blt.n	8000946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	b2da      	uxtb	r2, r3
 8000934:	490c      	ldr	r1, [pc, #48]	@ (8000968 <__NVIC_SetPriority+0x4c>)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	0112      	lsls	r2, r2, #4
 800093c:	b2d2      	uxtb	r2, r2
 800093e:	440b      	add	r3, r1
 8000940:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000944:	e00a      	b.n	800095c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	b2da      	uxtb	r2, r3
 800094a:	4908      	ldr	r1, [pc, #32]	@ (800096c <__NVIC_SetPriority+0x50>)
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	f003 030f 	and.w	r3, r3, #15
 8000952:	3b04      	subs	r3, #4
 8000954:	0112      	lsls	r2, r2, #4
 8000956:	b2d2      	uxtb	r2, r2
 8000958:	440b      	add	r3, r1
 800095a:	761a      	strb	r2, [r3, #24]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000e100 	.word	0xe000e100
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000970:	b480      	push	{r7}
 8000972:	b089      	sub	sp, #36	@ 0x24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	f1c3 0307 	rsb	r3, r3, #7
 800098a:	2b04      	cmp	r3, #4
 800098c:	bf28      	it	cs
 800098e:	2304      	movcs	r3, #4
 8000990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3304      	adds	r3, #4
 8000996:	2b06      	cmp	r3, #6
 8000998:	d902      	bls.n	80009a0 <NVIC_EncodePriority+0x30>
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3b03      	subs	r3, #3
 800099e:	e000      	b.n	80009a2 <NVIC_EncodePriority+0x32>
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	f04f 32ff 	mov.w	r2, #4294967295
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43da      	mvns	r2, r3
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	401a      	ands	r2, r3
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b8:	f04f 31ff 	mov.w	r1, #4294967295
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	fa01 f303 	lsl.w	r3, r1, r3
 80009c2:	43d9      	mvns	r1, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	4313      	orrs	r3, r2
         );
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3724      	adds	r7, #36	@ 0x24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
	...

080009d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009e8:	d301      	bcc.n	80009ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00f      	b.n	8000a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000a18 <SysTick_Config+0x40>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009f6:	210f      	movs	r1, #15
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	f7ff ff8e 	bl	800091c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a00:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <SysTick_Config+0x40>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a06:	4b04      	ldr	r3, [pc, #16]	@ (8000a18 <SysTick_Config+0x40>)
 8000a08:	2207      	movs	r2, #7
 8000a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	e000e010 	.word	0xe000e010

08000a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff ff29 	bl	800087c <__NVIC_SetPriorityGrouping>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	4603      	mov	r3, r0
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a40:	f7ff ff40 	bl	80008c4 <__NVIC_GetPriorityGrouping>
 8000a44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	68b9      	ldr	r1, [r7, #8]
 8000a4a:	6978      	ldr	r0, [r7, #20]
 8000a4c:	f7ff ff90 	bl	8000970 <NVIC_EncodePriority>
 8000a50:	4602      	mov	r2, r0
 8000a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a56:	4611      	mov	r1, r2
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff5f 	bl	800091c <__NVIC_SetPriority>
}
 8000a5e:	bf00      	nop
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff33 	bl	80008e0 <__NVIC_EnableIRQ>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff ffa4 	bl	80009d8 <SysTick_Config>
 8000a90:	4603      	mov	r3, r0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b087      	sub	sp, #28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000aaa:	e15a      	b.n	8000d62 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f000 814c 	beq.w	8000d5c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f003 0303 	and.w	r3, r3, #3
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d005      	beq.n	8000adc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d130      	bne.n	8000b3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	68da      	ldr	r2, [r3, #12]
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b12:	2201      	movs	r2, #1
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	091b      	lsrs	r3, r3, #4
 8000b28:	f003 0201 	and.w	r2, r3, #1
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f003 0303 	and.w	r3, r3, #3
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d017      	beq.n	8000b7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	2203      	movs	r2, #3
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f003 0303 	and.w	r3, r3, #3
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d123      	bne.n	8000bce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	08da      	lsrs	r2, r3, #3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3208      	adds	r2, #8
 8000b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	220f      	movs	r2, #15
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	691a      	ldr	r2, [r3, #16]
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	f003 0307 	and.w	r3, r3, #7
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	08da      	lsrs	r2, r3, #3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3208      	adds	r2, #8
 8000bc8:	6939      	ldr	r1, [r7, #16]
 8000bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	2203      	movs	r2, #3
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 0203 	and.w	r2, r3, #3
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f000 80a6 	beq.w	8000d5c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c10:	4b5b      	ldr	r3, [pc, #364]	@ (8000d80 <HAL_GPIO_Init+0x2e4>)
 8000c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c14:	4a5a      	ldr	r2, [pc, #360]	@ (8000d80 <HAL_GPIO_Init+0x2e4>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c1c:	4b58      	ldr	r3, [pc, #352]	@ (8000d80 <HAL_GPIO_Init+0x2e4>)
 8000c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c28:	4a56      	ldr	r2, [pc, #344]	@ (8000d84 <HAL_GPIO_Init+0x2e8>)
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	089b      	lsrs	r3, r3, #2
 8000c2e:	3302      	adds	r3, #2
 8000c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	220f      	movs	r2, #15
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c52:	d01f      	beq.n	8000c94 <HAL_GPIO_Init+0x1f8>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a4c      	ldr	r2, [pc, #304]	@ (8000d88 <HAL_GPIO_Init+0x2ec>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d019      	beq.n	8000c90 <HAL_GPIO_Init+0x1f4>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a4b      	ldr	r2, [pc, #300]	@ (8000d8c <HAL_GPIO_Init+0x2f0>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d013      	beq.n	8000c8c <HAL_GPIO_Init+0x1f0>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a4a      	ldr	r2, [pc, #296]	@ (8000d90 <HAL_GPIO_Init+0x2f4>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d00d      	beq.n	8000c88 <HAL_GPIO_Init+0x1ec>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a49      	ldr	r2, [pc, #292]	@ (8000d94 <HAL_GPIO_Init+0x2f8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d007      	beq.n	8000c84 <HAL_GPIO_Init+0x1e8>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a48      	ldr	r2, [pc, #288]	@ (8000d98 <HAL_GPIO_Init+0x2fc>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d101      	bne.n	8000c80 <HAL_GPIO_Init+0x1e4>
 8000c7c:	2305      	movs	r3, #5
 8000c7e:	e00a      	b.n	8000c96 <HAL_GPIO_Init+0x1fa>
 8000c80:	2306      	movs	r3, #6
 8000c82:	e008      	b.n	8000c96 <HAL_GPIO_Init+0x1fa>
 8000c84:	2304      	movs	r3, #4
 8000c86:	e006      	b.n	8000c96 <HAL_GPIO_Init+0x1fa>
 8000c88:	2303      	movs	r3, #3
 8000c8a:	e004      	b.n	8000c96 <HAL_GPIO_Init+0x1fa>
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	e002      	b.n	8000c96 <HAL_GPIO_Init+0x1fa>
 8000c90:	2301      	movs	r3, #1
 8000c92:	e000      	b.n	8000c96 <HAL_GPIO_Init+0x1fa>
 8000c94:	2300      	movs	r3, #0
 8000c96:	697a      	ldr	r2, [r7, #20]
 8000c98:	f002 0203 	and.w	r2, r2, #3
 8000c9c:	0092      	lsls	r2, r2, #2
 8000c9e:	4093      	lsls	r3, r2
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ca6:	4937      	ldr	r1, [pc, #220]	@ (8000d84 <HAL_GPIO_Init+0x2e8>)
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	089b      	lsrs	r3, r3, #2
 8000cac:	3302      	adds	r3, #2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cb4:	4b39      	ldr	r3, [pc, #228]	@ (8000d9c <HAL_GPIO_Init+0x300>)
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d003      	beq.n	8000cd8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cd8:	4a30      	ldr	r2, [pc, #192]	@ (8000d9c <HAL_GPIO_Init+0x300>)
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000cde:	4b2f      	ldr	r3, [pc, #188]	@ (8000d9c <HAL_GPIO_Init+0x300>)
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d02:	4a26      	ldr	r2, [pc, #152]	@ (8000d9c <HAL_GPIO_Init+0x300>)
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000d08:	4b24      	ldr	r3, [pc, #144]	@ (8000d9c <HAL_GPIO_Init+0x300>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	43db      	mvns	r3, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d003      	beq.n	8000d2c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d9c <HAL_GPIO_Init+0x300>)
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <HAL_GPIO_Init+0x300>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d56:	4a11      	ldr	r2, [pc, #68]	@ (8000d9c <HAL_GPIO_Init+0x300>)
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	fa22 f303 	lsr.w	r3, r2, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f47f ae9d 	bne.w	8000aac <HAL_GPIO_Init+0x10>
  }
}
 8000d72:	bf00      	nop
 8000d74:	bf00      	nop
 8000d76:	371c      	adds	r7, #28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010000 	.word	0x40010000
 8000d88:	48000400 	.word	0x48000400
 8000d8c:	48000800 	.word	0x48000800
 8000d90:	48000c00 	.word	0x48000c00
 8000d94:	48001000 	.word	0x48001000
 8000d98:	48001400 	.word	0x48001400
 8000d9c:	40010400 	.word	0x40010400

08000da0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d141      	bne.n	8000e32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dae:	4b4b      	ldr	r3, [pc, #300]	@ (8000edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dba:	d131      	bne.n	8000e20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000dbc:	4b47      	ldr	r3, [pc, #284]	@ (8000edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dc2:	4a46      	ldr	r2, [pc, #280]	@ (8000edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000dc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dcc:	4b43      	ldr	r3, [pc, #268]	@ (8000edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000dd4:	4a41      	ldr	r2, [pc, #260]	@ (8000edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ddc:	4b40      	ldr	r3, [pc, #256]	@ (8000ee0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2232      	movs	r2, #50	@ 0x32
 8000de2:	fb02 f303 	mul.w	r3, r2, r3
 8000de6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ee4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000de8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dec:	0c9b      	lsrs	r3, r3, #18
 8000dee:	3301      	adds	r3, #1
 8000df0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df2:	e002      	b.n	8000dfa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dfa:	4b38      	ldr	r3, [pc, #224]	@ (8000edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e06:	d102      	bne.n	8000e0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1f2      	bne.n	8000df4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e0e:	4b33      	ldr	r3, [pc, #204]	@ (8000edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e1a:	d158      	bne.n	8000ece <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e057      	b.n	8000ed0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e20:	4b2e      	ldr	r3, [pc, #184]	@ (8000edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e26:	4a2d      	ldr	r2, [pc, #180]	@ (8000edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000e2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000e30:	e04d      	b.n	8000ece <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e38:	d141      	bne.n	8000ebe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e3a:	4b28      	ldr	r3, [pc, #160]	@ (8000edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e46:	d131      	bne.n	8000eac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e48:	4b24      	ldr	r3, [pc, #144]	@ (8000edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e4e:	4a23      	ldr	r2, [pc, #140]	@ (8000edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e58:	4b20      	ldr	r3, [pc, #128]	@ (8000edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e60:	4a1e      	ldr	r2, [pc, #120]	@ (8000edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e68:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2232      	movs	r2, #50	@ 0x32
 8000e6e:	fb02 f303 	mul.w	r3, r2, r3
 8000e72:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e74:	fba2 2303 	umull	r2, r3, r2, r3
 8000e78:	0c9b      	lsrs	r3, r3, #18
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e7e:	e002      	b.n	8000e86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e92:	d102      	bne.n	8000e9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1f2      	bne.n	8000e80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e9a:	4b10      	ldr	r3, [pc, #64]	@ (8000edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ea6:	d112      	bne.n	8000ece <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e011      	b.n	8000ed0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000eac:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000ebc:	e007      	b.n	8000ece <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ebe:	4b07      	ldr	r3, [pc, #28]	@ (8000edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000ec6:	4a05      	ldr	r2, [pc, #20]	@ (8000edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ec8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ecc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	40007000 	.word	0x40007000
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	431bde83 	.word	0x431bde83

08000ee8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000eec:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	4a04      	ldr	r2, [pc, #16]	@ (8000f04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000ef2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef6:	6093      	str	r3, [r2, #8]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40007000 	.word	0x40007000

08000f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e2fe      	b.n	8001518 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d075      	beq.n	8001012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f26:	4b97      	ldr	r3, [pc, #604]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f003 030c 	and.w	r3, r3, #12
 8000f2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f30:	4b94      	ldr	r3, [pc, #592]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	2b0c      	cmp	r3, #12
 8000f3e:	d102      	bne.n	8000f46 <HAL_RCC_OscConfig+0x3e>
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d002      	beq.n	8000f4c <HAL_RCC_OscConfig+0x44>
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	d10b      	bne.n	8000f64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4c:	4b8d      	ldr	r3, [pc, #564]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d05b      	beq.n	8001010 <HAL_RCC_OscConfig+0x108>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d157      	bne.n	8001010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e2d9      	b.n	8001518 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f6c:	d106      	bne.n	8000f7c <HAL_RCC_OscConfig+0x74>
 8000f6e:	4b85      	ldr	r3, [pc, #532]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a84      	ldr	r2, [pc, #528]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 8000f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e01d      	b.n	8000fb8 <HAL_RCC_OscConfig+0xb0>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f84:	d10c      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x98>
 8000f86:	4b7f      	ldr	r3, [pc, #508]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a7e      	ldr	r2, [pc, #504]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 8000f8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	4b7c      	ldr	r3, [pc, #496]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a7b      	ldr	r2, [pc, #492]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 8000f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e00b      	b.n	8000fb8 <HAL_RCC_OscConfig+0xb0>
 8000fa0:	4b78      	ldr	r3, [pc, #480]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a77      	ldr	r2, [pc, #476]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 8000fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b75      	ldr	r3, [pc, #468]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a74      	ldr	r2, [pc, #464]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 8000fb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d013      	beq.n	8000fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fc50 	bl	8000864 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fc4c 	bl	8000864 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b64      	cmp	r3, #100	@ 0x64
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e29e      	b.n	8001518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fda:	4b6a      	ldr	r3, [pc, #424]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0f0      	beq.n	8000fc8 <HAL_RCC_OscConfig+0xc0>
 8000fe6:	e014      	b.n	8001012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fc3c 	bl	8000864 <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff0:	f7ff fc38 	bl	8000864 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b64      	cmp	r3, #100	@ 0x64
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e28a      	b.n	8001518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001002:	4b60      	ldr	r3, [pc, #384]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f0      	bne.n	8000ff0 <HAL_RCC_OscConfig+0xe8>
 800100e:	e000      	b.n	8001012 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d075      	beq.n	800110a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800101e:	4b59      	ldr	r3, [pc, #356]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f003 030c 	and.w	r3, r3, #12
 8001026:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001028:	4b56      	ldr	r3, [pc, #344]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	2b0c      	cmp	r3, #12
 8001036:	d102      	bne.n	800103e <HAL_RCC_OscConfig+0x136>
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d002      	beq.n	8001044 <HAL_RCC_OscConfig+0x13c>
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	2b04      	cmp	r3, #4
 8001042:	d11f      	bne.n	8001084 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001044:	4b4f      	ldr	r3, [pc, #316]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800104c:	2b00      	cmp	r3, #0
 800104e:	d005      	beq.n	800105c <HAL_RCC_OscConfig+0x154>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e25d      	b.n	8001518 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105c:	4b49      	ldr	r3, [pc, #292]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	061b      	lsls	r3, r3, #24
 800106a:	4946      	ldr	r1, [pc, #280]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 800106c:	4313      	orrs	r3, r2
 800106e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001070:	4b45      	ldr	r3, [pc, #276]	@ (8001188 <HAL_RCC_OscConfig+0x280>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fba9 	bl	80007cc <HAL_InitTick>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d043      	beq.n	8001108 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e249      	b.n	8001518 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d023      	beq.n	80010d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800108c:	4b3d      	ldr	r3, [pc, #244]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a3c      	ldr	r2, [pc, #240]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 8001092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001098:	f7ff fbe4 	bl	8000864 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a0:	f7ff fbe0 	bl	8000864 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e232      	b.n	8001518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010b2:	4b34      	ldr	r3, [pc, #208]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f0      	beq.n	80010a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010be:	4b31      	ldr	r3, [pc, #196]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	061b      	lsls	r3, r3, #24
 80010cc:	492d      	ldr	r1, [pc, #180]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	604b      	str	r3, [r1, #4]
 80010d2:	e01a      	b.n	800110a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 80010da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e0:	f7ff fbc0 	bl	8000864 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e8:	f7ff fbbc 	bl	8000864 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e20e      	b.n	8001518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010fa:	4b22      	ldr	r3, [pc, #136]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f0      	bne.n	80010e8 <HAL_RCC_OscConfig+0x1e0>
 8001106:	e000      	b.n	800110a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001108:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	2b00      	cmp	r3, #0
 8001114:	d041      	beq.n	800119a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d01c      	beq.n	8001158 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800111e:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 8001120:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001124:	4a17      	ldr	r2, [pc, #92]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800112e:	f7ff fb99 	bl	8000864 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001136:	f7ff fb95 	bl	8000864 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e1e7      	b.n	8001518 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001148:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 800114a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0ef      	beq.n	8001136 <HAL_RCC_OscConfig+0x22e>
 8001156:	e020      	b.n	800119a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001158:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 800115a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800115e:	4a09      	ldr	r2, [pc, #36]	@ (8001184 <HAL_RCC_OscConfig+0x27c>)
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001168:	f7ff fb7c 	bl	8000864 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800116e:	e00d      	b.n	800118c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001170:	f7ff fb78 	bl	8000864 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d906      	bls.n	800118c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e1ca      	b.n	8001518 <HAL_RCC_OscConfig+0x610>
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000
 8001188:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800118c:	4b8c      	ldr	r3, [pc, #560]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 800118e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1ea      	bne.n	8001170 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 80a6 	beq.w	80012f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a8:	2300      	movs	r3, #0
 80011aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011ac:	4b84      	ldr	r3, [pc, #528]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 80011ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <HAL_RCC_OscConfig+0x2b4>
 80011b8:	2301      	movs	r3, #1
 80011ba:	e000      	b.n	80011be <HAL_RCC_OscConfig+0x2b6>
 80011bc:	2300      	movs	r3, #0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00d      	beq.n	80011de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b7f      	ldr	r3, [pc, #508]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c6:	4a7e      	ldr	r2, [pc, #504]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ce:	4b7c      	ldr	r3, [pc, #496]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011da:	2301      	movs	r3, #1
 80011dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011de:	4b79      	ldr	r3, [pc, #484]	@ (80013c4 <HAL_RCC_OscConfig+0x4bc>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d118      	bne.n	800121c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011ea:	4b76      	ldr	r3, [pc, #472]	@ (80013c4 <HAL_RCC_OscConfig+0x4bc>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a75      	ldr	r2, [pc, #468]	@ (80013c4 <HAL_RCC_OscConfig+0x4bc>)
 80011f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011f6:	f7ff fb35 	bl	8000864 <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011fe:	f7ff fb31 	bl	8000864 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e183      	b.n	8001518 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001210:	4b6c      	ldr	r3, [pc, #432]	@ (80013c4 <HAL_RCC_OscConfig+0x4bc>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f0      	beq.n	80011fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d108      	bne.n	8001236 <HAL_RCC_OscConfig+0x32e>
 8001224:	4b66      	ldr	r3, [pc, #408]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 8001226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800122a:	4a65      	ldr	r2, [pc, #404]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001234:	e024      	b.n	8001280 <HAL_RCC_OscConfig+0x378>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b05      	cmp	r3, #5
 800123c:	d110      	bne.n	8001260 <HAL_RCC_OscConfig+0x358>
 800123e:	4b60      	ldr	r3, [pc, #384]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 8001240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001244:	4a5e      	ldr	r2, [pc, #376]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 8001246:	f043 0304 	orr.w	r3, r3, #4
 800124a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800124e:	4b5c      	ldr	r3, [pc, #368]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 8001250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001254:	4a5a      	ldr	r2, [pc, #360]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800125e:	e00f      	b.n	8001280 <HAL_RCC_OscConfig+0x378>
 8001260:	4b57      	ldr	r3, [pc, #348]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 8001262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001266:	4a56      	ldr	r2, [pc, #344]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 8001268:	f023 0301 	bic.w	r3, r3, #1
 800126c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001270:	4b53      	ldr	r3, [pc, #332]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 8001272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001276:	4a52      	ldr	r2, [pc, #328]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 8001278:	f023 0304 	bic.w	r3, r3, #4
 800127c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d016      	beq.n	80012b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001288:	f7ff faec 	bl	8000864 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800128e:	e00a      	b.n	80012a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001290:	f7ff fae8 	bl	8000864 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800129e:	4293      	cmp	r3, r2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e138      	b.n	8001518 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012a6:	4b46      	ldr	r3, [pc, #280]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 80012a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0ed      	beq.n	8001290 <HAL_RCC_OscConfig+0x388>
 80012b4:	e015      	b.n	80012e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b6:	f7ff fad5 	bl	8000864 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012bc:	e00a      	b.n	80012d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012be:	f7ff fad1 	bl	8000864 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e121      	b.n	8001518 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012d4:	4b3a      	ldr	r3, [pc, #232]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 80012d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1ed      	bne.n	80012be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d105      	bne.n	80012f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e8:	4b35      	ldr	r3, [pc, #212]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 80012ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ec:	4a34      	ldr	r2, [pc, #208]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 80012ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0320 	and.w	r3, r3, #32
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d03c      	beq.n	800137a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d01c      	beq.n	8001342 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001308:	4b2d      	ldr	r3, [pc, #180]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 800130a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800130e:	4a2c      	ldr	r2, [pc, #176]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001318:	f7ff faa4 	bl	8000864 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001320:	f7ff faa0 	bl	8000864 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e0f2      	b.n	8001518 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001332:	4b23      	ldr	r3, [pc, #140]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 8001334:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0ef      	beq.n	8001320 <HAL_RCC_OscConfig+0x418>
 8001340:	e01b      	b.n	800137a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001342:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 8001344:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001348:	4a1d      	ldr	r2, [pc, #116]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 800134a:	f023 0301 	bic.w	r3, r3, #1
 800134e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001352:	f7ff fa87 	bl	8000864 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800135a:	f7ff fa83 	bl	8000864 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e0d5      	b.n	8001518 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800136c:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 800136e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1ef      	bne.n	800135a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 80c9 	beq.w	8001516 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001384:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 030c 	and.w	r3, r3, #12
 800138c:	2b0c      	cmp	r3, #12
 800138e:	f000 8083 	beq.w	8001498 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d15e      	bne.n	8001458 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a08      	ldr	r2, [pc, #32]	@ (80013c0 <HAL_RCC_OscConfig+0x4b8>)
 80013a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80013a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a6:	f7ff fa5d 	bl	8000864 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013ac:	e00c      	b.n	80013c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ae:	f7ff fa59 	bl	8000864 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d905      	bls.n	80013c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e0ab      	b.n	8001518 <HAL_RCC_OscConfig+0x610>
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013c8:	4b55      	ldr	r3, [pc, #340]	@ (8001520 <HAL_RCC_OscConfig+0x618>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1ec      	bne.n	80013ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013d4:	4b52      	ldr	r3, [pc, #328]	@ (8001520 <HAL_RCC_OscConfig+0x618>)
 80013d6:	68da      	ldr	r2, [r3, #12]
 80013d8:	4b52      	ldr	r3, [pc, #328]	@ (8001524 <HAL_RCC_OscConfig+0x61c>)
 80013da:	4013      	ands	r3, r2
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6a11      	ldr	r1, [r2, #32]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80013e4:	3a01      	subs	r2, #1
 80013e6:	0112      	lsls	r2, r2, #4
 80013e8:	4311      	orrs	r1, r2
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80013ee:	0212      	lsls	r2, r2, #8
 80013f0:	4311      	orrs	r1, r2
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80013f6:	0852      	lsrs	r2, r2, #1
 80013f8:	3a01      	subs	r2, #1
 80013fa:	0552      	lsls	r2, r2, #21
 80013fc:	4311      	orrs	r1, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001402:	0852      	lsrs	r2, r2, #1
 8001404:	3a01      	subs	r2, #1
 8001406:	0652      	lsls	r2, r2, #25
 8001408:	4311      	orrs	r1, r2
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800140e:	06d2      	lsls	r2, r2, #27
 8001410:	430a      	orrs	r2, r1
 8001412:	4943      	ldr	r1, [pc, #268]	@ (8001520 <HAL_RCC_OscConfig+0x618>)
 8001414:	4313      	orrs	r3, r2
 8001416:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001418:	4b41      	ldr	r3, [pc, #260]	@ (8001520 <HAL_RCC_OscConfig+0x618>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a40      	ldr	r2, [pc, #256]	@ (8001520 <HAL_RCC_OscConfig+0x618>)
 800141e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001422:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001424:	4b3e      	ldr	r3, [pc, #248]	@ (8001520 <HAL_RCC_OscConfig+0x618>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	4a3d      	ldr	r2, [pc, #244]	@ (8001520 <HAL_RCC_OscConfig+0x618>)
 800142a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800142e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001430:	f7ff fa18 	bl	8000864 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001438:	f7ff fa14 	bl	8000864 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e066      	b.n	8001518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800144a:	4b35      	ldr	r3, [pc, #212]	@ (8001520 <HAL_RCC_OscConfig+0x618>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x530>
 8001456:	e05e      	b.n	8001516 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001458:	4b31      	ldr	r3, [pc, #196]	@ (8001520 <HAL_RCC_OscConfig+0x618>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a30      	ldr	r2, [pc, #192]	@ (8001520 <HAL_RCC_OscConfig+0x618>)
 800145e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001464:	f7ff f9fe 	bl	8000864 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146c:	f7ff f9fa 	bl	8000864 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e04c      	b.n	8001518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800147e:	4b28      	ldr	r3, [pc, #160]	@ (8001520 <HAL_RCC_OscConfig+0x618>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800148a:	4b25      	ldr	r3, [pc, #148]	@ (8001520 <HAL_RCC_OscConfig+0x618>)
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	4924      	ldr	r1, [pc, #144]	@ (8001520 <HAL_RCC_OscConfig+0x618>)
 8001490:	4b25      	ldr	r3, [pc, #148]	@ (8001528 <HAL_RCC_OscConfig+0x620>)
 8001492:	4013      	ands	r3, r2
 8001494:	60cb      	str	r3, [r1, #12]
 8001496:	e03e      	b.n	8001516 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e039      	b.n	8001518 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80014a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001520 <HAL_RCC_OscConfig+0x618>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f003 0203 	and.w	r2, r3, #3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d12c      	bne.n	8001512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c2:	3b01      	subs	r3, #1
 80014c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d123      	bne.n	8001512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d11b      	bne.n	8001512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d113      	bne.n	8001512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f4:	085b      	lsrs	r3, r3, #1
 80014f6:	3b01      	subs	r3, #1
 80014f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d109      	bne.n	8001512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001508:	085b      	lsrs	r3, r3, #1
 800150a:	3b01      	subs	r3, #1
 800150c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800150e:	429a      	cmp	r2, r3
 8001510:	d001      	beq.n	8001516 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3720      	adds	r7, #32
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	019f800c 	.word	0x019f800c
 8001528:	feeefffc 	.word	0xfeeefffc

0800152c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e11e      	b.n	8001782 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001544:	4b91      	ldr	r3, [pc, #580]	@ (800178c <HAL_RCC_ClockConfig+0x260>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d910      	bls.n	8001574 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001552:	4b8e      	ldr	r3, [pc, #568]	@ (800178c <HAL_RCC_ClockConfig+0x260>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f023 020f 	bic.w	r2, r3, #15
 800155a:	498c      	ldr	r1, [pc, #560]	@ (800178c <HAL_RCC_ClockConfig+0x260>)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	4313      	orrs	r3, r2
 8001560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001562:	4b8a      	ldr	r3, [pc, #552]	@ (800178c <HAL_RCC_ClockConfig+0x260>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d001      	beq.n	8001574 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e106      	b.n	8001782 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d073      	beq.n	8001668 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d129      	bne.n	80015dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001588:	4b81      	ldr	r3, [pc, #516]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0f4      	b.n	8001782 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001598:	f000 f966 	bl	8001868 <RCC_GetSysClockFreqFromPLLSource>
 800159c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4a7c      	ldr	r2, [pc, #496]	@ (8001794 <HAL_RCC_ClockConfig+0x268>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d93f      	bls.n	8001626 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80015a6:	4b7a      	ldr	r3, [pc, #488]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d009      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d033      	beq.n	8001626 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d12f      	bne.n	8001626 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80015c6:	4b72      	ldr	r3, [pc, #456]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80015ce:	4a70      	ldr	r2, [pc, #448]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 80015d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80015d6:	2380      	movs	r3, #128	@ 0x80
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e024      	b.n	8001626 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d107      	bne.n	80015f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d109      	bne.n	8001604 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0c6      	b.n	8001782 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f4:	4b66      	ldr	r3, [pc, #408]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0be      	b.n	8001782 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001604:	f000 f8ce 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 8001608:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4a61      	ldr	r2, [pc, #388]	@ (8001794 <HAL_RCC_ClockConfig+0x268>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d909      	bls.n	8001626 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001612:	4b5f      	ldr	r3, [pc, #380]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800161a:	4a5d      	ldr	r2, [pc, #372]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 800161c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001620:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001622:	2380      	movs	r3, #128	@ 0x80
 8001624:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001626:	4b5a      	ldr	r3, [pc, #360]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f023 0203 	bic.w	r2, r3, #3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	4957      	ldr	r1, [pc, #348]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 8001634:	4313      	orrs	r3, r2
 8001636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001638:	f7ff f914 	bl	8000864 <HAL_GetTick>
 800163c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163e:	e00a      	b.n	8001656 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001640:	f7ff f910 	bl	8000864 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800164e:	4293      	cmp	r3, r2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e095      	b.n	8001782 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001656:	4b4e      	ldr	r3, [pc, #312]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 020c 	and.w	r2, r3, #12
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	429a      	cmp	r2, r3
 8001666:	d1eb      	bne.n	8001640 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d023      	beq.n	80016bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001680:	4b43      	ldr	r3, [pc, #268]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	4a42      	ldr	r2, [pc, #264]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 8001686:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800168a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	2b00      	cmp	r3, #0
 8001696:	d007      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001698:	4b3d      	ldr	r3, [pc, #244]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80016a0:	4a3b      	ldr	r2, [pc, #236]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 80016a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a8:	4b39      	ldr	r3, [pc, #228]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4936      	ldr	r1, [pc, #216]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
 80016ba:	e008      	b.n	80016ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	2b80      	cmp	r3, #128	@ 0x80
 80016c0:	d105      	bne.n	80016ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80016c2:	4b33      	ldr	r3, [pc, #204]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	4a32      	ldr	r2, [pc, #200]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 80016c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80016cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016ce:	4b2f      	ldr	r3, [pc, #188]	@ (800178c <HAL_RCC_ClockConfig+0x260>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d21d      	bcs.n	8001718 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016dc:	4b2b      	ldr	r3, [pc, #172]	@ (800178c <HAL_RCC_ClockConfig+0x260>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f023 020f 	bic.w	r2, r3, #15
 80016e4:	4929      	ldr	r1, [pc, #164]	@ (800178c <HAL_RCC_ClockConfig+0x260>)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016ec:	f7ff f8ba 	bl	8000864 <HAL_GetTick>
 80016f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f2:	e00a      	b.n	800170a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f4:	f7ff f8b6 	bl	8000864 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001702:	4293      	cmp	r3, r2
 8001704:	d901      	bls.n	800170a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e03b      	b.n	8001782 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800170a:	4b20      	ldr	r3, [pc, #128]	@ (800178c <HAL_RCC_ClockConfig+0x260>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d1ed      	bne.n	80016f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d008      	beq.n	8001736 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001724:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	4917      	ldr	r1, [pc, #92]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d009      	beq.n	8001756 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001742:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	490f      	ldr	r1, [pc, #60]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001756:	f000 f825 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 800175a:	4602      	mov	r2, r0
 800175c:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <HAL_RCC_ClockConfig+0x264>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	091b      	lsrs	r3, r3, #4
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	490c      	ldr	r1, [pc, #48]	@ (8001798 <HAL_RCC_ClockConfig+0x26c>)
 8001768:	5ccb      	ldrb	r3, [r1, r3]
 800176a:	f003 031f 	and.w	r3, r3, #31
 800176e:	fa22 f303 	lsr.w	r3, r2, r3
 8001772:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <HAL_RCC_ClockConfig+0x270>)
 8001774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001776:	4b0a      	ldr	r3, [pc, #40]	@ (80017a0 <HAL_RCC_ClockConfig+0x274>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff f826 	bl	80007cc <HAL_InitTick>
 8001780:	4603      	mov	r3, r0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40022000 	.word	0x40022000
 8001790:	40021000 	.word	0x40021000
 8001794:	04c4b400 	.word	0x04c4b400
 8001798:	08002eb0 	.word	0x08002eb0
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000004 	.word	0x20000004

080017a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b087      	sub	sp, #28
 80017a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80017aa:	4b2c      	ldr	r3, [pc, #176]	@ (800185c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d102      	bne.n	80017bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001860 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	e047      	b.n	800184c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80017bc:	4b27      	ldr	r3, [pc, #156]	@ (800185c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d102      	bne.n	80017ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017c8:	4b26      	ldr	r3, [pc, #152]	@ (8001864 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	e03e      	b.n	800184c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80017ce:	4b23      	ldr	r3, [pc, #140]	@ (800185c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	2b0c      	cmp	r3, #12
 80017d8:	d136      	bne.n	8001848 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017da:	4b20      	ldr	r3, [pc, #128]	@ (800185c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017e4:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	3301      	adds	r3, #1
 80017f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d10c      	bne.n	8001812 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001864 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001800:	4a16      	ldr	r2, [pc, #88]	@ (800185c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001802:	68d2      	ldr	r2, [r2, #12]
 8001804:	0a12      	lsrs	r2, r2, #8
 8001806:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800180a:	fb02 f303 	mul.w	r3, r2, r3
 800180e:	617b      	str	r3, [r7, #20]
      break;
 8001810:	e00c      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001812:	4a13      	ldr	r2, [pc, #76]	@ (8001860 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	fbb2 f3f3 	udiv	r3, r2, r3
 800181a:	4a10      	ldr	r2, [pc, #64]	@ (800185c <HAL_RCC_GetSysClockFreq+0xb8>)
 800181c:	68d2      	ldr	r2, [r2, #12]
 800181e:	0a12      	lsrs	r2, r2, #8
 8001820:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001824:	fb02 f303 	mul.w	r3, r2, r3
 8001828:	617b      	str	r3, [r7, #20]
      break;
 800182a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800182c:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <HAL_RCC_GetSysClockFreq+0xb8>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	0e5b      	lsrs	r3, r3, #25
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	3301      	adds	r3, #1
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	fbb2 f3f3 	udiv	r3, r2, r3
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	e001      	b.n	800184c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800184c:	693b      	ldr	r3, [r7, #16]
}
 800184e:	4618      	mov	r0, r3
 8001850:	371c      	adds	r7, #28
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000
 8001860:	00f42400 	.word	0x00f42400
 8001864:	007a1200 	.word	0x007a1200

08001868 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800186e:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001878:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3301      	adds	r3, #1
 8001884:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d10c      	bne.n	80018a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800188c:	4a17      	ldr	r2, [pc, #92]	@ (80018ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	fbb2 f3f3 	udiv	r3, r2, r3
 8001894:	4a14      	ldr	r2, [pc, #80]	@ (80018e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001896:	68d2      	ldr	r2, [r2, #12]
 8001898:	0a12      	lsrs	r2, r2, #8
 800189a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	617b      	str	r3, [r7, #20]
    break;
 80018a4:	e00c      	b.n	80018c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018a6:	4a12      	ldr	r2, [pc, #72]	@ (80018f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ae:	4a0e      	ldr	r2, [pc, #56]	@ (80018e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018b0:	68d2      	ldr	r2, [r2, #12]
 80018b2:	0a12      	lsrs	r2, r2, #8
 80018b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80018b8:	fb02 f303 	mul.w	r3, r2, r3
 80018bc:	617b      	str	r3, [r7, #20]
    break;
 80018be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018c0:	4b09      	ldr	r3, [pc, #36]	@ (80018e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	0e5b      	lsrs	r3, r3, #25
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	3301      	adds	r3, #1
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80018da:	687b      	ldr	r3, [r7, #4]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	371c      	adds	r7, #28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	40021000 	.word	0x40021000
 80018ec:	007a1200 	.word	0x007a1200
 80018f0:	00f42400 	.word	0x00f42400

080018f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e049      	b.n	800199a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d106      	bne.n	8001920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7fe feb6 	bl	800068c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3304      	adds	r3, #4
 8001930:	4619      	mov	r1, r3
 8001932:	4610      	mov	r0, r2
 8001934:	f000 fd68 	bl	8002408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e049      	b.n	8001a48 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d106      	bne.n	80019ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f841 	bl	8001a50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2202      	movs	r2, #2
 80019d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3304      	adds	r3, #4
 80019de:	4619      	mov	r1, r3
 80019e0:	4610      	mov	r0, r2
 80019e2:	f000 fd11 	bl	8002408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d109      	bne.n	8001a8c <HAL_TIM_PWM_Start_IT+0x28>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	bf14      	ite	ne
 8001a84:	2301      	movne	r3, #1
 8001a86:	2300      	moveq	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	e03c      	b.n	8001b06 <HAL_TIM_PWM_Start_IT+0xa2>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d109      	bne.n	8001aa6 <HAL_TIM_PWM_Start_IT+0x42>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	bf14      	ite	ne
 8001a9e:	2301      	movne	r3, #1
 8001aa0:	2300      	moveq	r3, #0
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	e02f      	b.n	8001b06 <HAL_TIM_PWM_Start_IT+0xa2>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d109      	bne.n	8001ac0 <HAL_TIM_PWM_Start_IT+0x5c>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	bf14      	ite	ne
 8001ab8:	2301      	movne	r3, #1
 8001aba:	2300      	moveq	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	e022      	b.n	8001b06 <HAL_TIM_PWM_Start_IT+0xa2>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	2b0c      	cmp	r3, #12
 8001ac4:	d109      	bne.n	8001ada <HAL_TIM_PWM_Start_IT+0x76>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	bf14      	ite	ne
 8001ad2:	2301      	movne	r3, #1
 8001ad4:	2300      	moveq	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	e015      	b.n	8001b06 <HAL_TIM_PWM_Start_IT+0xa2>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b10      	cmp	r3, #16
 8001ade:	d109      	bne.n	8001af4 <HAL_TIM_PWM_Start_IT+0x90>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	bf14      	ite	ne
 8001aec:	2301      	movne	r3, #1
 8001aee:	2300      	moveq	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	e008      	b.n	8001b06 <HAL_TIM_PWM_Start_IT+0xa2>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	bf14      	ite	ne
 8001b00:	2301      	movne	r3, #1
 8001b02:	2300      	moveq	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e0e2      	b.n	8001cd4 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d104      	bne.n	8001b1e <HAL_TIM_PWM_Start_IT+0xba>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2202      	movs	r2, #2
 8001b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b1c:	e023      	b.n	8001b66 <HAL_TIM_PWM_Start_IT+0x102>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d104      	bne.n	8001b2e <HAL_TIM_PWM_Start_IT+0xca>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2202      	movs	r2, #2
 8001b28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b2c:	e01b      	b.n	8001b66 <HAL_TIM_PWM_Start_IT+0x102>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d104      	bne.n	8001b3e <HAL_TIM_PWM_Start_IT+0xda>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b3c:	e013      	b.n	8001b66 <HAL_TIM_PWM_Start_IT+0x102>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2b0c      	cmp	r3, #12
 8001b42:	d104      	bne.n	8001b4e <HAL_TIM_PWM_Start_IT+0xea>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001b4c:	e00b      	b.n	8001b66 <HAL_TIM_PWM_Start_IT+0x102>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b10      	cmp	r3, #16
 8001b52:	d104      	bne.n	8001b5e <HAL_TIM_PWM_Start_IT+0xfa>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2202      	movs	r2, #2
 8001b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b5c:	e003      	b.n	8001b66 <HAL_TIM_PWM_Start_IT+0x102>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2202      	movs	r2, #2
 8001b62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2b0c      	cmp	r3, #12
 8001b6a:	d841      	bhi.n	8001bf0 <HAL_TIM_PWM_Start_IT+0x18c>
 8001b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b74 <HAL_TIM_PWM_Start_IT+0x110>)
 8001b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b72:	bf00      	nop
 8001b74:	08001ba9 	.word	0x08001ba9
 8001b78:	08001bf1 	.word	0x08001bf1
 8001b7c:	08001bf1 	.word	0x08001bf1
 8001b80:	08001bf1 	.word	0x08001bf1
 8001b84:	08001bbb 	.word	0x08001bbb
 8001b88:	08001bf1 	.word	0x08001bf1
 8001b8c:	08001bf1 	.word	0x08001bf1
 8001b90:	08001bf1 	.word	0x08001bf1
 8001b94:	08001bcd 	.word	0x08001bcd
 8001b98:	08001bf1 	.word	0x08001bf1
 8001b9c:	08001bf1 	.word	0x08001bf1
 8001ba0:	08001bf1 	.word	0x08001bf1
 8001ba4:	08001bdf 	.word	0x08001bdf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0202 	orr.w	r2, r2, #2
 8001bb6:	60da      	str	r2, [r3, #12]
      break;
 8001bb8:	e01d      	b.n	8001bf6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f042 0204 	orr.w	r2, r2, #4
 8001bc8:	60da      	str	r2, [r3, #12]
      break;
 8001bca:	e014      	b.n	8001bf6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0208 	orr.w	r2, r2, #8
 8001bda:	60da      	str	r2, [r3, #12]
      break;
 8001bdc:	e00b      	b.n	8001bf6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 0210 	orr.w	r2, r2, #16
 8001bec:	60da      	str	r2, [r3, #12]
      break;
 8001bee:	e002      	b.n	8001bf6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8001bf4:	bf00      	nop
  }

  if (status == HAL_OK)
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d16a      	bne.n	8001cd2 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2201      	movs	r2, #1
 8001c02:	6839      	ldr	r1, [r7, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f001 f82d 	bl	8002c64 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a33      	ldr	r2, [pc, #204]	@ (8001cdc <HAL_TIM_PWM_Start_IT+0x278>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d013      	beq.n	8001c3c <HAL_TIM_PWM_Start_IT+0x1d8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a31      	ldr	r2, [pc, #196]	@ (8001ce0 <HAL_TIM_PWM_Start_IT+0x27c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00e      	beq.n	8001c3c <HAL_TIM_PWM_Start_IT+0x1d8>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a30      	ldr	r2, [pc, #192]	@ (8001ce4 <HAL_TIM_PWM_Start_IT+0x280>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d009      	beq.n	8001c3c <HAL_TIM_PWM_Start_IT+0x1d8>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a2e      	ldr	r2, [pc, #184]	@ (8001ce8 <HAL_TIM_PWM_Start_IT+0x284>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d004      	beq.n	8001c3c <HAL_TIM_PWM_Start_IT+0x1d8>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a2d      	ldr	r2, [pc, #180]	@ (8001cec <HAL_TIM_PWM_Start_IT+0x288>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d101      	bne.n	8001c40 <HAL_TIM_PWM_Start_IT+0x1dc>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <HAL_TIM_PWM_Start_IT+0x1de>
 8001c40:	2300      	movs	r3, #0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d007      	beq.n	8001c56 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a20      	ldr	r2, [pc, #128]	@ (8001cdc <HAL_TIM_PWM_Start_IT+0x278>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d018      	beq.n	8001c92 <HAL_TIM_PWM_Start_IT+0x22e>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c68:	d013      	beq.n	8001c92 <HAL_TIM_PWM_Start_IT+0x22e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a20      	ldr	r2, [pc, #128]	@ (8001cf0 <HAL_TIM_PWM_Start_IT+0x28c>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d00e      	beq.n	8001c92 <HAL_TIM_PWM_Start_IT+0x22e>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a1e      	ldr	r2, [pc, #120]	@ (8001cf4 <HAL_TIM_PWM_Start_IT+0x290>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d009      	beq.n	8001c92 <HAL_TIM_PWM_Start_IT+0x22e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a17      	ldr	r2, [pc, #92]	@ (8001ce0 <HAL_TIM_PWM_Start_IT+0x27c>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d004      	beq.n	8001c92 <HAL_TIM_PWM_Start_IT+0x22e>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a15      	ldr	r2, [pc, #84]	@ (8001ce4 <HAL_TIM_PWM_Start_IT+0x280>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d115      	bne.n	8001cbe <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	4b17      	ldr	r3, [pc, #92]	@ (8001cf8 <HAL_TIM_PWM_Start_IT+0x294>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b06      	cmp	r3, #6
 8001ca2:	d015      	beq.n	8001cd0 <HAL_TIM_PWM_Start_IT+0x26c>
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001caa:	d011      	beq.n	8001cd0 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cbc:	e008      	b.n	8001cd0 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 0201 	orr.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	e000      	b.n	8001cd2 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40012c00 	.word	0x40012c00
 8001ce0:	40013400 	.word	0x40013400
 8001ce4:	40014000 	.word	0x40014000
 8001ce8:	40014400 	.word	0x40014400
 8001cec:	40014800 	.word	0x40014800
 8001cf0:	40000400 	.word	0x40000400
 8001cf4:	40000800 	.word	0x40000800
 8001cf8:	00010007 	.word	0x00010007

08001cfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d020      	beq.n	8001d60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d01b      	beq.n	8001d60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0202 	mvn.w	r2, #2
 8001d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 fb4a 	bl	80023e0 <HAL_TIM_IC_CaptureCallback>
 8001d4c:	e005      	b.n	8001d5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fb3c 	bl	80023cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7fe fa8d 	bl	8000274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d020      	beq.n	8001dac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d01b      	beq.n	8001dac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0204 	mvn.w	r2, #4
 8001d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2202      	movs	r2, #2
 8001d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 fb24 	bl	80023e0 <HAL_TIM_IC_CaptureCallback>
 8001d98:	e005      	b.n	8001da6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fb16 	bl	80023cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7fe fa67 	bl	8000274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d020      	beq.n	8001df8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d01b      	beq.n	8001df8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0208 	mvn.w	r2, #8
 8001dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2204      	movs	r2, #4
 8001dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fafe 	bl	80023e0 <HAL_TIM_IC_CaptureCallback>
 8001de4:	e005      	b.n	8001df2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 faf0 	bl	80023cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7fe fa41 	bl	8000274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d020      	beq.n	8001e44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d01b      	beq.n	8001e44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0210 	mvn.w	r2, #16
 8001e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2208      	movs	r2, #8
 8001e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 fad8 	bl	80023e0 <HAL_TIM_IC_CaptureCallback>
 8001e30:	e005      	b.n	8001e3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 faca 	bl	80023cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7fe fa1b 	bl	8000274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00c      	beq.n	8001e68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d007      	beq.n	8001e68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0201 	mvn.w	r2, #1
 8001e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 faa8 	bl	80023b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d104      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00c      	beq.n	8001e96 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d007      	beq.n	8001e96 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 ff99 	bl	8002dc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00c      	beq.n	8001eba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d007      	beq.n	8001eba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 ff91 	bl	8002ddc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00c      	beq.n	8001ede <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 fa8b 	bl	80023f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00c      	beq.n	8001f02 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d007      	beq.n	8001f02 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f06f 0220 	mvn.w	r2, #32
 8001efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 ff59 	bl	8002db4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00c      	beq.n	8001f26 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d007      	beq.n	8001f26 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8001f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 ff65 	bl	8002df0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00c      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d007      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8001f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 ff5d 	bl	8002e04 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00c      	beq.n	8001f6e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d007      	beq.n	8001f6e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8001f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 ff55 	bl	8002e18 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00c      	beq.n	8001f92 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d007      	beq.n	8001f92 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8001f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 ff4d 	bl	8002e2c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e0ff      	b.n	80021ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b14      	cmp	r3, #20
 8001fc6:	f200 80f0 	bhi.w	80021aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001fca:	a201      	add	r2, pc, #4	@ (adr r2, 8001fd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd0:	08002025 	.word	0x08002025
 8001fd4:	080021ab 	.word	0x080021ab
 8001fd8:	080021ab 	.word	0x080021ab
 8001fdc:	080021ab 	.word	0x080021ab
 8001fe0:	08002065 	.word	0x08002065
 8001fe4:	080021ab 	.word	0x080021ab
 8001fe8:	080021ab 	.word	0x080021ab
 8001fec:	080021ab 	.word	0x080021ab
 8001ff0:	080020a7 	.word	0x080020a7
 8001ff4:	080021ab 	.word	0x080021ab
 8001ff8:	080021ab 	.word	0x080021ab
 8001ffc:	080021ab 	.word	0x080021ab
 8002000:	080020e7 	.word	0x080020e7
 8002004:	080021ab 	.word	0x080021ab
 8002008:	080021ab 	.word	0x080021ab
 800200c:	080021ab 	.word	0x080021ab
 8002010:	08002129 	.word	0x08002129
 8002014:	080021ab 	.word	0x080021ab
 8002018:	080021ab 	.word	0x080021ab
 800201c:	080021ab 	.word	0x080021ab
 8002020:	08002169 	.word	0x08002169
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	4618      	mov	r0, r3
 800202c:	f000 fa88 	bl	8002540 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	699a      	ldr	r2, [r3, #24]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0208 	orr.w	r2, r2, #8
 800203e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699a      	ldr	r2, [r3, #24]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0204 	bic.w	r2, r2, #4
 800204e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6999      	ldr	r1, [r3, #24]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	691a      	ldr	r2, [r3, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	619a      	str	r2, [r3, #24]
      break;
 8002062:	e0a5      	b.n	80021b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	4618      	mov	r0, r3
 800206c:	f000 faf8 	bl	8002660 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800207e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699a      	ldr	r2, [r3, #24]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800208e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6999      	ldr	r1, [r3, #24]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	021a      	lsls	r2, r3, #8
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	619a      	str	r2, [r3, #24]
      break;
 80020a4:	e084      	b.n	80021b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68b9      	ldr	r1, [r7, #8]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 fb61 	bl	8002774 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	69da      	ldr	r2, [r3, #28]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 0208 	orr.w	r2, r2, #8
 80020c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	69da      	ldr	r2, [r3, #28]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0204 	bic.w	r2, r2, #4
 80020d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	69d9      	ldr	r1, [r3, #28]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	61da      	str	r2, [r3, #28]
      break;
 80020e4:	e064      	b.n	80021b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68b9      	ldr	r1, [r7, #8]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 fbc9 	bl	8002884 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	69da      	ldr	r2, [r3, #28]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	69d9      	ldr	r1, [r3, #28]
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	021a      	lsls	r2, r3, #8
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	61da      	str	r2, [r3, #28]
      break;
 8002126:	e043      	b.n	80021b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fc32 	bl	8002998 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0208 	orr.w	r2, r2, #8
 8002142:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0204 	bic.w	r2, r2, #4
 8002152:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002166:	e023      	b.n	80021b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	4618      	mov	r0, r3
 8002170:	f000 fc76 	bl	8002a60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002182:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002192:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	021a      	lsls	r2, r3, #8
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80021a8:	e002      	b.n	80021b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	75fb      	strb	r3, [r7, #23]
      break;
 80021ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80021b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop

080021c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <HAL_TIM_ConfigClockSource+0x1c>
 80021dc:	2302      	movs	r3, #2
 80021de:	e0de      	b.n	800239e <HAL_TIM_ConfigClockSource+0x1da>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80021fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800220a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a63      	ldr	r2, [pc, #396]	@ (80023a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	f000 80a9 	beq.w	8002372 <HAL_TIM_ConfigClockSource+0x1ae>
 8002220:	4a61      	ldr	r2, [pc, #388]	@ (80023a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002222:	4293      	cmp	r3, r2
 8002224:	f200 80ae 	bhi.w	8002384 <HAL_TIM_ConfigClockSource+0x1c0>
 8002228:	4a60      	ldr	r2, [pc, #384]	@ (80023ac <HAL_TIM_ConfigClockSource+0x1e8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	f000 80a1 	beq.w	8002372 <HAL_TIM_ConfigClockSource+0x1ae>
 8002230:	4a5e      	ldr	r2, [pc, #376]	@ (80023ac <HAL_TIM_ConfigClockSource+0x1e8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	f200 80a6 	bhi.w	8002384 <HAL_TIM_ConfigClockSource+0x1c0>
 8002238:	4a5d      	ldr	r2, [pc, #372]	@ (80023b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800223a:	4293      	cmp	r3, r2
 800223c:	f000 8099 	beq.w	8002372 <HAL_TIM_ConfigClockSource+0x1ae>
 8002240:	4a5b      	ldr	r2, [pc, #364]	@ (80023b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002242:	4293      	cmp	r3, r2
 8002244:	f200 809e 	bhi.w	8002384 <HAL_TIM_ConfigClockSource+0x1c0>
 8002248:	4a5a      	ldr	r2, [pc, #360]	@ (80023b4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	f000 8091 	beq.w	8002372 <HAL_TIM_ConfigClockSource+0x1ae>
 8002250:	4a58      	ldr	r2, [pc, #352]	@ (80023b4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	f200 8096 	bhi.w	8002384 <HAL_TIM_ConfigClockSource+0x1c0>
 8002258:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800225c:	f000 8089 	beq.w	8002372 <HAL_TIM_ConfigClockSource+0x1ae>
 8002260:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002264:	f200 808e 	bhi.w	8002384 <HAL_TIM_ConfigClockSource+0x1c0>
 8002268:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800226c:	d03e      	beq.n	80022ec <HAL_TIM_ConfigClockSource+0x128>
 800226e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002272:	f200 8087 	bhi.w	8002384 <HAL_TIM_ConfigClockSource+0x1c0>
 8002276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800227a:	f000 8086 	beq.w	800238a <HAL_TIM_ConfigClockSource+0x1c6>
 800227e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002282:	d87f      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x1c0>
 8002284:	2b70      	cmp	r3, #112	@ 0x70
 8002286:	d01a      	beq.n	80022be <HAL_TIM_ConfigClockSource+0xfa>
 8002288:	2b70      	cmp	r3, #112	@ 0x70
 800228a:	d87b      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x1c0>
 800228c:	2b60      	cmp	r3, #96	@ 0x60
 800228e:	d050      	beq.n	8002332 <HAL_TIM_ConfigClockSource+0x16e>
 8002290:	2b60      	cmp	r3, #96	@ 0x60
 8002292:	d877      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x1c0>
 8002294:	2b50      	cmp	r3, #80	@ 0x50
 8002296:	d03c      	beq.n	8002312 <HAL_TIM_ConfigClockSource+0x14e>
 8002298:	2b50      	cmp	r3, #80	@ 0x50
 800229a:	d873      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x1c0>
 800229c:	2b40      	cmp	r3, #64	@ 0x40
 800229e:	d058      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0x18e>
 80022a0:	2b40      	cmp	r3, #64	@ 0x40
 80022a2:	d86f      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x1c0>
 80022a4:	2b30      	cmp	r3, #48	@ 0x30
 80022a6:	d064      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x1ae>
 80022a8:	2b30      	cmp	r3, #48	@ 0x30
 80022aa:	d86b      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x1c0>
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d060      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x1ae>
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	d867      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x1c0>
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d05c      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x1ae>
 80022b8:	2b10      	cmp	r3, #16
 80022ba:	d05a      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x1ae>
 80022bc:	e062      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022ce:	f000 fca9 	bl	8002c24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80022e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	609a      	str	r2, [r3, #8]
      break;
 80022ea:	e04f      	b.n	800238c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022fc:	f000 fc92 	bl	8002c24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800230e:	609a      	str	r2, [r3, #8]
      break;
 8002310:	e03c      	b.n	800238c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800231e:	461a      	mov	r2, r3
 8002320:	f000 fc04 	bl	8002b2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2150      	movs	r1, #80	@ 0x50
 800232a:	4618      	mov	r0, r3
 800232c:	f000 fc5d 	bl	8002bea <TIM_ITRx_SetConfig>
      break;
 8002330:	e02c      	b.n	800238c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800233e:	461a      	mov	r2, r3
 8002340:	f000 fc23 	bl	8002b8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2160      	movs	r1, #96	@ 0x60
 800234a:	4618      	mov	r0, r3
 800234c:	f000 fc4d 	bl	8002bea <TIM_ITRx_SetConfig>
      break;
 8002350:	e01c      	b.n	800238c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800235e:	461a      	mov	r2, r3
 8002360:	f000 fbe4 	bl	8002b2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2140      	movs	r1, #64	@ 0x40
 800236a:	4618      	mov	r0, r3
 800236c:	f000 fc3d 	bl	8002bea <TIM_ITRx_SetConfig>
      break;
 8002370:	e00c      	b.n	800238c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4619      	mov	r1, r3
 800237c:	4610      	mov	r0, r2
 800237e:	f000 fc34 	bl	8002bea <TIM_ITRx_SetConfig>
      break;
 8002382:	e003      	b.n	800238c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
      break;
 8002388:	e000      	b.n	800238c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800238a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	00100070 	.word	0x00100070
 80023ac:	00100040 	.word	0x00100040
 80023b0:	00100030 	.word	0x00100030
 80023b4:	00100020 	.word	0x00100020

080023b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a42      	ldr	r2, [pc, #264]	@ (8002524 <TIM_Base_SetConfig+0x11c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d00f      	beq.n	8002440 <TIM_Base_SetConfig+0x38>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002426:	d00b      	beq.n	8002440 <TIM_Base_SetConfig+0x38>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a3f      	ldr	r2, [pc, #252]	@ (8002528 <TIM_Base_SetConfig+0x120>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d007      	beq.n	8002440 <TIM_Base_SetConfig+0x38>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a3e      	ldr	r2, [pc, #248]	@ (800252c <TIM_Base_SetConfig+0x124>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d003      	beq.n	8002440 <TIM_Base_SetConfig+0x38>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a3d      	ldr	r2, [pc, #244]	@ (8002530 <TIM_Base_SetConfig+0x128>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d108      	bne.n	8002452 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4313      	orrs	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a33      	ldr	r2, [pc, #204]	@ (8002524 <TIM_Base_SetConfig+0x11c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d01b      	beq.n	8002492 <TIM_Base_SetConfig+0x8a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002460:	d017      	beq.n	8002492 <TIM_Base_SetConfig+0x8a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a30      	ldr	r2, [pc, #192]	@ (8002528 <TIM_Base_SetConfig+0x120>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <TIM_Base_SetConfig+0x8a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a2f      	ldr	r2, [pc, #188]	@ (800252c <TIM_Base_SetConfig+0x124>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00f      	beq.n	8002492 <TIM_Base_SetConfig+0x8a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a2e      	ldr	r2, [pc, #184]	@ (8002530 <TIM_Base_SetConfig+0x128>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00b      	beq.n	8002492 <TIM_Base_SetConfig+0x8a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a2d      	ldr	r2, [pc, #180]	@ (8002534 <TIM_Base_SetConfig+0x12c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d007      	beq.n	8002492 <TIM_Base_SetConfig+0x8a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a2c      	ldr	r2, [pc, #176]	@ (8002538 <TIM_Base_SetConfig+0x130>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d003      	beq.n	8002492 <TIM_Base_SetConfig+0x8a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a2b      	ldr	r2, [pc, #172]	@ (800253c <TIM_Base_SetConfig+0x134>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d108      	bne.n	80024a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a16      	ldr	r2, [pc, #88]	@ (8002524 <TIM_Base_SetConfig+0x11c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00f      	beq.n	80024f0 <TIM_Base_SetConfig+0xe8>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a17      	ldr	r2, [pc, #92]	@ (8002530 <TIM_Base_SetConfig+0x128>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d00b      	beq.n	80024f0 <TIM_Base_SetConfig+0xe8>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a16      	ldr	r2, [pc, #88]	@ (8002534 <TIM_Base_SetConfig+0x12c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d007      	beq.n	80024f0 <TIM_Base_SetConfig+0xe8>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a15      	ldr	r2, [pc, #84]	@ (8002538 <TIM_Base_SetConfig+0x130>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d003      	beq.n	80024f0 <TIM_Base_SetConfig+0xe8>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a14      	ldr	r2, [pc, #80]	@ (800253c <TIM_Base_SetConfig+0x134>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d103      	bne.n	80024f8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b01      	cmp	r3, #1
 8002508:	d105      	bne.n	8002516 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f023 0201 	bic.w	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	611a      	str	r2, [r3, #16]
  }
}
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40012c00 	.word	0x40012c00
 8002528:	40000400 	.word	0x40000400
 800252c:	40000800 	.word	0x40000800
 8002530:	40013400 	.word	0x40013400
 8002534:	40014000 	.word	0x40014000
 8002538:	40014400 	.word	0x40014400
 800253c:	40014800 	.word	0x40014800

08002540 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002540:	b480      	push	{r7}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f023 0201 	bic.w	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800256e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f023 0303 	bic.w	r3, r3, #3
 800257a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4313      	orrs	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f023 0302 	bic.w	r3, r3, #2
 800258c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a2c      	ldr	r2, [pc, #176]	@ (800264c <TIM_OC1_SetConfig+0x10c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d00f      	beq.n	80025c0 <TIM_OC1_SetConfig+0x80>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a2b      	ldr	r2, [pc, #172]	@ (8002650 <TIM_OC1_SetConfig+0x110>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00b      	beq.n	80025c0 <TIM_OC1_SetConfig+0x80>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002654 <TIM_OC1_SetConfig+0x114>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d007      	beq.n	80025c0 <TIM_OC1_SetConfig+0x80>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a29      	ldr	r2, [pc, #164]	@ (8002658 <TIM_OC1_SetConfig+0x118>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d003      	beq.n	80025c0 <TIM_OC1_SetConfig+0x80>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a28      	ldr	r2, [pc, #160]	@ (800265c <TIM_OC1_SetConfig+0x11c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d10c      	bne.n	80025da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f023 0308 	bic.w	r3, r3, #8
 80025c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f023 0304 	bic.w	r3, r3, #4
 80025d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a1b      	ldr	r2, [pc, #108]	@ (800264c <TIM_OC1_SetConfig+0x10c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00f      	beq.n	8002602 <TIM_OC1_SetConfig+0xc2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a1a      	ldr	r2, [pc, #104]	@ (8002650 <TIM_OC1_SetConfig+0x110>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00b      	beq.n	8002602 <TIM_OC1_SetConfig+0xc2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a19      	ldr	r2, [pc, #100]	@ (8002654 <TIM_OC1_SetConfig+0x114>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d007      	beq.n	8002602 <TIM_OC1_SetConfig+0xc2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a18      	ldr	r2, [pc, #96]	@ (8002658 <TIM_OC1_SetConfig+0x118>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d003      	beq.n	8002602 <TIM_OC1_SetConfig+0xc2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a17      	ldr	r2, [pc, #92]	@ (800265c <TIM_OC1_SetConfig+0x11c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d111      	bne.n	8002626 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	621a      	str	r2, [r3, #32]
}
 8002640:	bf00      	nop
 8002642:	371c      	adds	r7, #28
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	40012c00 	.word	0x40012c00
 8002650:	40013400 	.word	0x40013400
 8002654:	40014000 	.word	0x40014000
 8002658:	40014400 	.word	0x40014400
 800265c:	40014800 	.word	0x40014800

08002660 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	f023 0210 	bic.w	r2, r3, #16
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800268e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800269a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	021b      	lsls	r3, r3, #8
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f023 0320 	bic.w	r3, r3, #32
 80026ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a28      	ldr	r2, [pc, #160]	@ (8002760 <TIM_OC2_SetConfig+0x100>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d003      	beq.n	80026cc <TIM_OC2_SetConfig+0x6c>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a27      	ldr	r2, [pc, #156]	@ (8002764 <TIM_OC2_SetConfig+0x104>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d10d      	bne.n	80026e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002760 <TIM_OC2_SetConfig+0x100>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d00f      	beq.n	8002710 <TIM_OC2_SetConfig+0xb0>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002764 <TIM_OC2_SetConfig+0x104>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00b      	beq.n	8002710 <TIM_OC2_SetConfig+0xb0>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002768 <TIM_OC2_SetConfig+0x108>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d007      	beq.n	8002710 <TIM_OC2_SetConfig+0xb0>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a1a      	ldr	r2, [pc, #104]	@ (800276c <TIM_OC2_SetConfig+0x10c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d003      	beq.n	8002710 <TIM_OC2_SetConfig+0xb0>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a19      	ldr	r2, [pc, #100]	@ (8002770 <TIM_OC2_SetConfig+0x110>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d113      	bne.n	8002738 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002716:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800271e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	621a      	str	r2, [r3, #32]
}
 8002752:	bf00      	nop
 8002754:	371c      	adds	r7, #28
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40012c00 	.word	0x40012c00
 8002764:	40013400 	.word	0x40013400
 8002768:	40014000 	.word	0x40014000
 800276c:	40014400 	.word	0x40014400
 8002770:	40014800 	.word	0x40014800

08002774 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f023 0303 	bic.w	r3, r3, #3
 80027ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80027c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	021b      	lsls	r3, r3, #8
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a27      	ldr	r2, [pc, #156]	@ (8002870 <TIM_OC3_SetConfig+0xfc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d003      	beq.n	80027de <TIM_OC3_SetConfig+0x6a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a26      	ldr	r2, [pc, #152]	@ (8002874 <TIM_OC3_SetConfig+0x100>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d10d      	bne.n	80027fa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002870 <TIM_OC3_SetConfig+0xfc>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d00f      	beq.n	8002822 <TIM_OC3_SetConfig+0xae>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1b      	ldr	r2, [pc, #108]	@ (8002874 <TIM_OC3_SetConfig+0x100>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00b      	beq.n	8002822 <TIM_OC3_SetConfig+0xae>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a1a      	ldr	r2, [pc, #104]	@ (8002878 <TIM_OC3_SetConfig+0x104>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d007      	beq.n	8002822 <TIM_OC3_SetConfig+0xae>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a19      	ldr	r2, [pc, #100]	@ (800287c <TIM_OC3_SetConfig+0x108>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d003      	beq.n	8002822 <TIM_OC3_SetConfig+0xae>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a18      	ldr	r2, [pc, #96]	@ (8002880 <TIM_OC3_SetConfig+0x10c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d113      	bne.n	800284a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	621a      	str	r2, [r3, #32]
}
 8002864:	bf00      	nop
 8002866:	371c      	adds	r7, #28
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40012c00 	.word	0x40012c00
 8002874:	40013400 	.word	0x40013400
 8002878:	40014000 	.word	0x40014000
 800287c:	40014400 	.word	0x40014400
 8002880:	40014800 	.word	0x40014800

08002884 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80028d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	031b      	lsls	r3, r3, #12
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a28      	ldr	r2, [pc, #160]	@ (8002984 <TIM_OC4_SetConfig+0x100>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d003      	beq.n	80028f0 <TIM_OC4_SetConfig+0x6c>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a27      	ldr	r2, [pc, #156]	@ (8002988 <TIM_OC4_SetConfig+0x104>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d10d      	bne.n	800290c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80028f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	031b      	lsls	r3, r3, #12
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4313      	orrs	r3, r2
 8002902:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800290a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a1d      	ldr	r2, [pc, #116]	@ (8002984 <TIM_OC4_SetConfig+0x100>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d00f      	beq.n	8002934 <TIM_OC4_SetConfig+0xb0>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a1c      	ldr	r2, [pc, #112]	@ (8002988 <TIM_OC4_SetConfig+0x104>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00b      	beq.n	8002934 <TIM_OC4_SetConfig+0xb0>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a1b      	ldr	r2, [pc, #108]	@ (800298c <TIM_OC4_SetConfig+0x108>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d007      	beq.n	8002934 <TIM_OC4_SetConfig+0xb0>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a1a      	ldr	r2, [pc, #104]	@ (8002990 <TIM_OC4_SetConfig+0x10c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d003      	beq.n	8002934 <TIM_OC4_SetConfig+0xb0>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a19      	ldr	r2, [pc, #100]	@ (8002994 <TIM_OC4_SetConfig+0x110>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d113      	bne.n	800295c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800293a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002942:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	019b      	lsls	r3, r3, #6
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	019b      	lsls	r3, r3, #6
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	621a      	str	r2, [r3, #32]
}
 8002976:	bf00      	nop
 8002978:	371c      	adds	r7, #28
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40012c00 	.word	0x40012c00
 8002988:	40013400 	.word	0x40013400
 800298c:	40014000 	.word	0x40014000
 8002990:	40014400 	.word	0x40014400
 8002994:	40014800 	.word	0x40014800

08002998 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80029dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	041b      	lsls	r3, r3, #16
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a17      	ldr	r2, [pc, #92]	@ (8002a4c <TIM_OC5_SetConfig+0xb4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00f      	beq.n	8002a12 <TIM_OC5_SetConfig+0x7a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a16      	ldr	r2, [pc, #88]	@ (8002a50 <TIM_OC5_SetConfig+0xb8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00b      	beq.n	8002a12 <TIM_OC5_SetConfig+0x7a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a15      	ldr	r2, [pc, #84]	@ (8002a54 <TIM_OC5_SetConfig+0xbc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d007      	beq.n	8002a12 <TIM_OC5_SetConfig+0x7a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a14      	ldr	r2, [pc, #80]	@ (8002a58 <TIM_OC5_SetConfig+0xc0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d003      	beq.n	8002a12 <TIM_OC5_SetConfig+0x7a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a13      	ldr	r2, [pc, #76]	@ (8002a5c <TIM_OC5_SetConfig+0xc4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d109      	bne.n	8002a26 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	621a      	str	r2, [r3, #32]
}
 8002a40:	bf00      	nop
 8002a42:	371c      	adds	r7, #28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	40012c00 	.word	0x40012c00
 8002a50:	40013400 	.word	0x40013400
 8002a54:	40014000 	.word	0x40014000
 8002a58:	40014400 	.word	0x40014400
 8002a5c:	40014800 	.word	0x40014800

08002a60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002aa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	051b      	lsls	r3, r3, #20
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a18      	ldr	r2, [pc, #96]	@ (8002b18 <TIM_OC6_SetConfig+0xb8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d00f      	beq.n	8002adc <TIM_OC6_SetConfig+0x7c>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a17      	ldr	r2, [pc, #92]	@ (8002b1c <TIM_OC6_SetConfig+0xbc>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00b      	beq.n	8002adc <TIM_OC6_SetConfig+0x7c>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a16      	ldr	r2, [pc, #88]	@ (8002b20 <TIM_OC6_SetConfig+0xc0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d007      	beq.n	8002adc <TIM_OC6_SetConfig+0x7c>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a15      	ldr	r2, [pc, #84]	@ (8002b24 <TIM_OC6_SetConfig+0xc4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d003      	beq.n	8002adc <TIM_OC6_SetConfig+0x7c>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a14      	ldr	r2, [pc, #80]	@ (8002b28 <TIM_OC6_SetConfig+0xc8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d109      	bne.n	8002af0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	029b      	lsls	r3, r3, #10
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	621a      	str	r2, [r3, #32]
}
 8002b0a:	bf00      	nop
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40012c00 	.word	0x40012c00
 8002b1c:	40013400 	.word	0x40013400
 8002b20:	40014000 	.word	0x40014000
 8002b24:	40014400 	.word	0x40014400
 8002b28:	40014800 	.word	0x40014800

08002b2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	f023 0201 	bic.w	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f023 030a 	bic.w	r3, r3, #10
 8002b68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	621a      	str	r2, [r3, #32]
}
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b087      	sub	sp, #28
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	f023 0210 	bic.w	r2, r3, #16
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	031b      	lsls	r3, r3, #12
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002bc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	621a      	str	r2, [r3, #32]
}
 8002bde:	bf00      	nop
 8002be0:	371c      	adds	r7, #28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b085      	sub	sp, #20
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002c00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f043 0307 	orr.w	r3, r3, #7
 8002c10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	609a      	str	r2, [r3, #8]
}
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	021a      	lsls	r2, r3, #8
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	609a      	str	r2, [r3, #8]
}
 8002c58:	bf00      	nop
 8002c5a:	371c      	adds	r7, #28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	2201      	movs	r2, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a1a      	ldr	r2, [r3, #32]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	401a      	ands	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a1a      	ldr	r2, [r3, #32]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	621a      	str	r2, [r3, #32]
}
 8002ca2:	bf00      	nop
 8002ca4:	371c      	adds	r7, #28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e065      	b.n	8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a2c      	ldr	r2, [pc, #176]	@ (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d004      	beq.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a2b      	ldr	r2, [pc, #172]	@ (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d108      	bne.n	8002d0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002d02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1b      	ldr	r2, [pc, #108]	@ (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d018      	beq.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d3e:	d013      	beq.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a18      	ldr	r2, [pc, #96]	@ (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00e      	beq.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a17      	ldr	r2, [pc, #92]	@ (8002dac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d009      	beq.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a12      	ldr	r2, [pc, #72]	@ (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d004      	beq.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a13      	ldr	r2, [pc, #76]	@ (8002db0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d10c      	bne.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40012c00 	.word	0x40012c00
 8002da4:	40013400 	.word	0x40013400
 8002da8:	40000400 	.word	0x40000400
 8002dac:	40000800 	.word	0x40000800
 8002db0:	40014000 	.word	0x40014000

08002db4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <memset>:
 8002e40:	4402      	add	r2, r0
 8002e42:	4603      	mov	r3, r0
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d100      	bne.n	8002e4a <memset+0xa>
 8002e48:	4770      	bx	lr
 8002e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e4e:	e7f9      	b.n	8002e44 <memset+0x4>

08002e50 <__libc_init_array>:
 8002e50:	b570      	push	{r4, r5, r6, lr}
 8002e52:	4d0d      	ldr	r5, [pc, #52]	@ (8002e88 <__libc_init_array+0x38>)
 8002e54:	4c0d      	ldr	r4, [pc, #52]	@ (8002e8c <__libc_init_array+0x3c>)
 8002e56:	1b64      	subs	r4, r4, r5
 8002e58:	10a4      	asrs	r4, r4, #2
 8002e5a:	2600      	movs	r6, #0
 8002e5c:	42a6      	cmp	r6, r4
 8002e5e:	d109      	bne.n	8002e74 <__libc_init_array+0x24>
 8002e60:	4d0b      	ldr	r5, [pc, #44]	@ (8002e90 <__libc_init_array+0x40>)
 8002e62:	4c0c      	ldr	r4, [pc, #48]	@ (8002e94 <__libc_init_array+0x44>)
 8002e64:	f000 f818 	bl	8002e98 <_init>
 8002e68:	1b64      	subs	r4, r4, r5
 8002e6a:	10a4      	asrs	r4, r4, #2
 8002e6c:	2600      	movs	r6, #0
 8002e6e:	42a6      	cmp	r6, r4
 8002e70:	d105      	bne.n	8002e7e <__libc_init_array+0x2e>
 8002e72:	bd70      	pop	{r4, r5, r6, pc}
 8002e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e78:	4798      	blx	r3
 8002e7a:	3601      	adds	r6, #1
 8002e7c:	e7ee      	b.n	8002e5c <__libc_init_array+0xc>
 8002e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e82:	4798      	blx	r3
 8002e84:	3601      	adds	r6, #1
 8002e86:	e7f2      	b.n	8002e6e <__libc_init_array+0x1e>
 8002e88:	08002ec0 	.word	0x08002ec0
 8002e8c:	08002ec0 	.word	0x08002ec0
 8002e90:	08002ec0 	.word	0x08002ec0
 8002e94:	08002ec4 	.word	0x08002ec4

08002e98 <_init>:
 8002e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9a:	bf00      	nop
 8002e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9e:	bc08      	pop	{r3}
 8002ea0:	469e      	mov	lr, r3
 8002ea2:	4770      	bx	lr

08002ea4 <_fini>:
 8002ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea6:	bf00      	nop
 8002ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eaa:	bc08      	pop	{r3}
 8002eac:	469e      	mov	lr, r3
 8002eae:	4770      	bx	lr
